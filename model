import numpy as np  # linear algebra
import pandas as pd  # data processing, CSV file I/O (e.g. pd.read_csv)
import csv
# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os

for dirname, _, filenames in os.walk('D:\deep_learning\hw3\ml2022spring-hw3'):
    for filename in filenames:
        pass
        # print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
_exp_name = "sample"
# Import necessary packages.
import numpy as np
import torch
import torch.onnx as onnx
import os
import torch.nn as nn
import torchvision.transforms as transforms
from PIL import Image
# "ConcatDataset" and "Subset" are possibly useful when doing semi-supervised learning.
from torch.utils.data import ConcatDataset, DataLoader, Subset, Dataset
from torchvision.datasets import DatasetFolder, VisionDataset
import torch.nn.functional as F
# This is for the progress bar.
from tqdm.auto import tqdm
import random
import resnet18

device="cuda"

stale = 0
best_acc = 0
tfm1=transforms.Compose([
    #transforms.Resize((32,32)),
    transforms.RandomCrop(32, padding=4),  # 先四周填充0，在吧图像随机裁剪成32*32
    transforms.RandomHorizontalFlip(),  # 图像一半的概率翻转，一半的概率不翻转
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

class CifarDataSet(Dataset):
    def __init__(self,path,tfm,files=None):
        super(CifarDataSet).__init__()
        self.path=path
        self.files=(sorted(os.path.join(path+"/train",x) for x in os.listdir(path+"/train") if x.endswith(".png")))
        #self.files.sort(key=lambda q: int(q[16:-4]))
        if(False):
            self.lables=pd.read_csv(path+"/trainLabels.csv")["label"].unique()
        self.transform = tfm
        pass
    def __getitem__(self, idx):
        img=Image.open(self.files[idx])
        img = self.transform(img)
        if int(self.files[idx-1].split("\\")[-1][0:-4])==50000:
            print("find you")
        #print(int(self.files[idx-1].split("/")[-1][0:-4]))
        p = {"frog": 0, "truck": 1, "deer": 2, "automobile": 3, "bird": 4, "horse": 5, "ship": 6, "cat": 7, "dog": 8,
             "airplane": 9}
        label=pd.read_csv(self.path+"/trainLabels.csv")["label"][int(self.files[idx].split("\\")[-1][0:-4])-1]
        return img,p[label]
    def __len__(self):
        return len(self.files)
class Classifier(nn.Module):
    # def __init__(self):
    #     super(Classifier, self).__init__()
    #     # torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding)
    #     # torch.nn.MaxPool2d(kernel_size, stride, padding)
    #     # input 維度 [3, 128, 128]
    #     self.Conv1 = nn.Conv2d(3, 64, 7, 2, 3, bias=False)
    #     self.BN = nn.BatchNorm2d(64)
    #     self.ReLU = nn.ReLU()
    #     self.MaxPool = nn.MaxPool2d(kernel_size=3, padding=1, stride=2)
    #
    #     self.res18stage1=nn.Sequential(
    #          nn.Conv2d(64, 64,3,1,padding=1,bias=False),
    #          nn.BatchNorm2d(64),
    #          nn.ReLU(),
    #          nn.Conv2d(64, 64,3,1,padding=1,bias=False),
    #          nn.BatchNorm2d(64),
    #          nn.ReLU(),
    #     )
    #
    #     self.stage1 = nn.Sequential(
    #         nn.Conv2d(64, 64, 1, 1, bias=False),
    #         nn.BatchNorm2d(64),
    #         nn.ReLU(),
    #         nn.Conv2d(64, 64, 3, 1, 1, bias=False),
    #         nn.BatchNorm2d(64),
    #         nn.ReLU(),
    #         nn.Conv2d(64, 256, 1, 1, bias=False),
    #         nn.BatchNorm2d(256),
    #     )
    #     self.stage2 = nn.Sequential(
    #         nn.Conv2d(256, 64, 1, 1, bias=False),
    #         nn.BatchNorm2d(64),
    #         nn.ReLU(),
    #         nn.Conv2d(64, 64, 3, 1, 1, bias=False),
    #         nn.BatchNorm2d(64),
    #         nn.ReLU(),
    #         nn.Conv2d(64, 256, 1, 1, bias=False),
    #         nn.BatchNorm2d(256),
    #     )
    #     self.stage3 = nn.Sequential(
    #         nn.Conv2d(256, 128, 1, 1, bias=False),
    #         nn.BatchNorm2d(128),
    #         nn.ReLU(),
    #         nn.Conv2d(128, 128, 3, 2, 1, bias=False),
    #         nn.BatchNorm2d(128),
    #         nn.ReLU(),
    #         nn.Conv2d(128, 512, 1, 1, bias=False),
    #         nn.BatchNorm2d(512),
    #     )
    #     self.stage4 = nn.Sequential(
    #         nn.Conv2d(512, 128, 1, 1, bias=False),
    #         nn.BatchNorm2d(128),
    #         nn.ReLU(),
    #         nn.Conv2d(128, 128, 3, 1, 1, bias=False),
    #         nn.BatchNorm2d(128),
    #         nn.ReLU(),
    #         nn.Conv2d(128, 512, 1, 1, bias=False),
    #         nn.BatchNorm2d(512),
    #     )
    #     # Bottlencek4_1
    #     self.stage5 = nn.Sequential(
    #         nn.Conv2d(512, 256, 1, 1, bias=False),
    #         nn.BatchNorm2d(256),
    #         nn.ReLU(),
    #         nn.Conv2d(256, 256, 3, 2, 1, bias=False),
    #         nn.BatchNorm2d(256),
    #         nn.ReLU(),
    #         nn.Conv2d(256, 1024, 1, 1, bias=False),
    #         nn.BatchNorm2d(1024),
    #     )
    #     # Bottlencek4_2
    #     self.stage6 = nn.Sequential(
    #         nn.Conv2d(1024, 256, 1, 1, bias=False),
    #         nn.BatchNorm2d(256),
    #         nn.ReLU(),
    #         nn.Conv2d(256, 256, 3, 1, 1, bias=False),
    #         nn.BatchNorm2d(256),
    #         nn.ReLU(),
    #         nn.Conv2d(256, 1024, 1, 1, bias=False),
    #         nn.BatchNorm2d(1024),
    #     )
    #
    #     # Bottlencek5_1
    #     self.stage7 = nn.Sequential(
    #         nn.Conv2d(1024, 512, 1, 1, bias=False),
    #         nn.BatchNorm2d(512),
    #         nn.ReLU(),
    #         nn.Conv2d(512, 512, 3, 2, 1, bias=False),
    #         nn.BatchNorm2d(512),
    #         nn.ReLU(),
    #         nn.Conv2d(512, 2048, 1, 1, bias=False),
    #         nn.BatchNorm2d(2048),
    #     )
    #
    #     # Bottlencek5_2
    #     self.stage8 = nn.Sequential(
    #         nn.Conv2d(2048, 512, 1, 1, bias=False),
    #         nn.BatchNorm2d(512),
    #         nn.ReLU(),
    #         nn.Conv2d(512, 512, 3, 1, 1, bias=False),
    #         nn.BatchNorm2d(512),
    #         nn.ReLU(),
    #         nn.Conv2d(512, 2048, 1, 1, bias=False),
    #         nn.BatchNorm2d(2048),
    #     )
    #
    #     self.downsample2_1 = nn.Sequential(
    #         nn.Conv2d(64, 256, 1, 1, bias=False),
    #         nn.BatchNorm2d(256)
    #     )
    #     self.downsample3_1 = nn.Sequential(
    #         nn.Conv2d(256, 512, 1, 2, bias=False),
    #         nn.BatchNorm2d(512)
    #     )
    #     self.downsample4_1 = nn.Sequential(
    #         nn.Conv2d(512, 1024, 1, 2, bias=False),
    #         nn.BatchNorm2d(1024)
    #     )
    #     self.downsample5_1 = nn.Sequential(
    #         nn.Conv2d(1024, 2048, 1, 2, bias=False),
    #         nn.BatchNorm2d(2048)
    #     )
    #     self.pool = nn.AdaptiveAvgPool2d(output_size=(1, 1))
    #     self.fc = nn.Linear(in_features=2048, out_features=10, bias=True)
    #
    #     self.dp=nn.Dropout2d(inplace=False,p=0.2)
    # def make_layer(self):
    #     pass
    #
    # def forward(self, x):
    #     out = self.Conv1(x)
    #     out = self.BN(out)
    #     out = self.ReLU(out)
    #     resdual = self.MaxPool(out)
    #     out = self.stage1(resdual)
    #     resdual = self.downsample2_1(resdual)
    #     out += resdual
    #     out = self.ReLU(out)
    #     #out=self.dp(out)
    #
    #     resdual = out
    #     out = self.stage2(out)
    #     out += resdual
    #     out = self.ReLU(out)
    #     resdual = out
    #     out = self.stage2(out)
    #     out += resdual
    #     out = self.ReLU(out)
    #     resdual = out
    #     resdual = self.downsample3_1(resdual)
    #     out = self.stage3(out)
    #     out += resdual
    #
    #     # Bottleneck 3_2
    #     out = self.ReLU(out)
    #     resdual = out
    #     out = self.stage4(out)
    #     out += resdual
    #
    #     # Bottleneck 3_3
    #     out = self.ReLU(out)
    #     resdual = out
    #     out = self.stage4(out)
    #     out += resdual
    #
    #     # Bottleneck 3_4
    #     out = self.ReLU(out)
    #     resdual = out
    #     out = self.stage4(out)
    #     out += resdual
    #
    #     # Bottleneck 4_1
    #     out = self.ReLU(out)
    #     resdual = out
    #     out = self.stage5(out)
    #     resdual = self.downsample4_1(resdual)
    #     out += resdual
    #
    #     # Bottleneck 4_2
    #     out = self.ReLU(out)
    #     #out=self.dp(out)
    #     resdual = out
    #     out = self.stage6(out)
    #     out += resdual
    #
    #     # Bottleneck 4_3
    #     out = self.ReLU(out)
    #     resdual = out
    #     out = self.stage6(out)
    #     out += resdual
    #
    #     # Bottleneck 4_4
    #     out = self.ReLU(out)
    #     resdual = out
    #     out = self.stage6(out)
    #     out += resdual
    #
    #     # Bottleneck 4_5
    #     out = self.ReLU(out)
    #     resdual = out
    #     out = self.stage6(out)
    #     out += resdual
    #
    #     # Bottleneck 4_6
    #     out = self.ReLU(out)
    #     resdual = out
    #     out = self.stage6(out)
    #     out += resdual
    #
    #     # Bottleneck 5_1
    #     out = self.ReLU(out)
    #     resdual = out
    #     out = self.stage7(out)
    #     resdual = self.downsample5_1(resdual)
    #     out += resdual
    #
    #     # Bottleneck 5_2
    #     out = self.ReLU(out)
    #     #out=self.dp(out)
    #     resdual = out
    #     out = self.stage8(out)
    #     out += resdual
    #
    #     # Bottleneck 5_3
    #     out = self.ReLU(out)
    #     resdual = out
    #     out = self.stage8(out)
    #     out += resdual
    #
    #     out = self.ReLU(out)
    #     out = self.pool(out)
    #     out = torch.flatten(out, 1)
    #     out = self.fc(out)
    #     return out
    def __init__(self):
        super().__init__()
        self.conv=nn.Sequential(
            nn.Conv2d(3, 64, 3, 1, 1, bias=False),
            nn.BatchNorm2d(64),
            nn.ReLU()
        )
        #self.first_conv4=nn.MaxPool2d(kernel_size=3, padding=1, stride=2)

        self.res18stage1 = nn.Sequential(
            nn.Conv2d(64, 64, 3, 1, padding=1, bias=False),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.Conv2d(64, 64, 3, 1, padding=1, bias=False),
            nn.BatchNorm2d(64),

        )
        self.res18stage2 = nn.Sequential(
            nn.Conv2d(64, 128, 3, 2, padding=1, bias=False),
            nn.BatchNorm2d(128),
            nn.ReLU(),
            nn.Conv2d(128, 128, 3, 1, padding=1, bias=False),
            nn.BatchNorm2d(128),

        )
        self.res18stage3 = nn.Sequential(
            nn.Conv2d(128, 128, 3, 1, padding=1, bias=False),
            nn.BatchNorm2d(128),
            nn.ReLU(),
            nn.Conv2d(128, 128, 3, 1, padding=1, bias=False),
            nn.BatchNorm2d(128),

        )
        self.res18stage4 = nn.Sequential(
            nn.Conv2d(128, 256, 3, 2, padding=1, bias=False),
            nn.BatchNorm2d(256),
            nn.ReLU(),
            nn.Conv2d(256, 256, 3, 1, padding=1, bias=False),
            nn.BatchNorm2d(256),

        )
        self.res18stage5 = nn.Sequential(
            nn.Conv2d(256, 256, 3, 1, padding=1, bias=False),
            nn.BatchNorm2d(256),
            nn.ReLU(),
            nn.Conv2d(256, 256, 3, 1, padding=1, bias=False),
            nn.BatchNorm2d(256),

        )
        self.res18stage6 = nn.Sequential(
            nn.Conv2d(256, 512, 3, 2, padding=1, bias=False),
            nn.BatchNorm2d(512),
            nn.ReLU(),
            nn.Conv2d(512, 512, 3, 1, padding=1, bias=False),
            nn.BatchNorm2d(512),

        )
        self.res18stage7 = nn.Sequential(
            nn.Conv2d(512, 512, 3, 1, padding=1, bias=False),
            nn.BatchNorm2d(512),
            nn.ReLU(),
            nn.Conv2d(512, 512, 3, 1, padding=1, bias=False),
            nn.BatchNorm2d(512),

        )
        self.res16sample1=nn.Sequential(
            nn.Conv2d(64,128,1,2,0),
            nn.BatchNorm2d(128),

        )
        self.res16sample2=nn.Sequential(
            nn.Conv2d(128,256,1,2,0),
            nn.BatchNorm2d(256),

        )
        self.res16sample3=nn.Sequential(
            nn.Conv2d(256,512,1,2,0),
            nn.BatchNorm2d(512),

        )
        self.relu=nn.ReLU()
        self.pool = nn.AdaptiveAvgPool2d(output_size=(1, 1))
        self.fc = nn.Linear(in_features=512, out_features=10, bias=True)
    def forward(self, out):
        out=self.conv(out)
        #out = self.first_conv4(out)
        resdual=out
        out=self.res18stage1(out)
        out+=resdual
        out=self.relu(out)
        resdual=out
        out=self.res18stage1(out)
        out+=resdual
        out=self.relu(out)

        resdual=out
        out=self.res18stage2(out)
        resdual=self.res16sample1(resdual)
        out+=resdual
        out=self.relu(out)

        resdual=out
        out=self.res18stage3(out)
        out+=resdual
        out=self.relu(out)

        resdual=out
        out=self.res18stage4(out)
        resdual=self.res16sample2(resdual)
        out+=resdual
        out=self.relu(out)


        resdual=out
        out=self.res18stage5(out)
        out+=resdual
        out=self.relu(out)

        resdual=out
        out=self.res18stage6(out)
        resdual=self.res16sample3(resdual)
        out+=resdual
        out=self.relu(out)

        resdual=out
        out=self.res18stage7(out)
        out+=resdual
        out=self.relu(out)

        out = self.pool(out)
        out = torch.flatten(out, 1)
        out = self.fc(out)
        return out


train_dataset=CifarDataSet("./cifar-10",tfm=tfm1)
train_loader=DataLoader(train_dataset, batch_size=256, shuffle=True, num_workers=0, pin_memory=True)

model=Classifier().to(device="cuda")
#model=resnet18.ResNet18().to(device="cuda")
# model_best = Classifier().to(device)
model.load_state_dict(torch.load("./zhihu_banben/sample_0.9632.ckpt"))
n_epochs=100
patient=30
criterion = nn.CrossEntropyLoss()
optimizer=torch.optim.Adam(model.parameters(),lr=0.0003, weight_decay=1e-5)
#optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.9, weight_decay=5e-4)
stale = 0
best_acc = 0
#schedule=torch.optim.lr_scheduler.StepLR(optimizer,step_size=30,gamma=0.1)
CosineLR = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=150, eta_min=0)
for epoch in range(n_epochs):
    p=0
    # ---------- Training ----------
    # Make sure the model is in train mode before training.
    model.train()

    # These are used to record information in training.
    train_loss = []
    train_accs = []

    for batch in tqdm(train_loader):
        # A batch consists of image data and corresponding labels.
        imgs, labels = batch
        # imgs = imgs.half()
        # print(imgs.shape,labels.shape)

        # Forward the data. (Make sure data and model are on the same device.)
        logits = model(imgs.to(device))

        # Calculate the cross-entropy loss.
        # We don't need to apply softmax before computing cross-entropy as it is done automatically.
        loss = criterion(logits, labels.to(device))

        # Gradients stored in the parameters in the previous step should be cleared out first.
        optimizer.zero_grad()

        # Compute the gradients for parameters.
        loss.backward()

        # Clip the gradient norms for stable training.
        grad_norm = nn.utils.clip_grad_norm_(model.parameters(), max_norm=10)

        # Update the parameters with computed gradients.
        optimizer.step()
        CosineLR.step()
        # Compute the accuracy for current batch.
        acc = (logits.argmax(dim=-1) == labels.to(device)).float().mean()

        # Record the loss and accuracy.
        train_loss.append(loss.item())
        train_accs.append(acc)
        with open("./zhihu_banben/continue/test.log","a")as f:
            q=acc.__str__().split(",")[0].split("(")[1]
            f.writelines(f"[ Train | {epoch + 1}/{n_epochs} ] loss = {train_loss[p]}, acc = {q}"+
                "  lr="+str(+optimizer.defaults["lr"])+"\n")
            print(f"[ Train | {epoch + 1}/{n_epochs} ] loss = {train_loss[p]}, acc = {q}")
            p = p + 1
    train_loss = sum(train_loss) / len(train_loss)
    train_acc = sum(train_accs) / len(train_accs)

    # Print the information.
    print(f"[ Train | {epoch + 1:03d}/{n_epochs:03d} ] loss = {train_loss:.5f}, acc = {train_acc:.5f}")
    if train_acc > best_acc:
        print(f"Best model found at epoch {epoch}, saving model")
        best_acc=train_acc
        torch.save(model.state_dict(), f"./zhihu_banben/continue/{_exp_name}_"+str(train_acc.__str__().split(",")[0].split("(")[1])+".ckpt")  #
    # ---------- Validation ----------
    # Make sure the model is in eval mode so that some modules like dropout are disabled and work normally.
    # model.eval()
    #
    # # These are used to record information in validation.
    # valid_loss = []
    # valid_accs = []

    # Iterate the validation set by batches.
    # for batch in tqdm(valid_loader):
    #     # A batch consists of image data and corresponding labels.
    #     imgs, labels = batch
    #     # imgs = imgs.half()
    #
    #     # We don't need gradient in validation.
    #     # Using torch.no_grad() accelerates the forward process.
    #     with torch.no_grad():
    #         logits = model(imgs.to(device))
    #
    #     # We can still compute the loss (but not the gradient).
    #     loss = criterion(logits, labels.to(device))
    #
    #     # Compute the accuracy for current batch.
    #     acc = (logits.argmax(dim=-1) == labels.to(device)).float().mean()
    #
    #     # Record the loss and accuracy.
    #     valid_loss.append(loss.item())
    #     valid_accs.append(acc)
    #     # break

    # The average loss and accuracy for entire validation set is the average of the recorded values.
    # valid_loss = sum(valid_loss) / len(valid_loss)
    # valid_acc = sum(valid_accs) / len(valid_accs)

    # Print the information.
    # print(f"[ Valid | {epoch + 1:03d}/{n_epochs:03d} ] loss = {valid_loss:.5f}, acc = {valid_acc:.5f}")

    # if train_acc > best_acc:
    #     with open(f"./log.txt", "a"):
    #         print(f"[ train | {epoch + 1:03d}/{n_epochs:03d} ] loss = {train_acc:.5f}, acc = {train_acc:.5f} -> best")
    # else:
    #     with open(f"./log.txt", "a") as f:
    #         f.writelines(f"[ train | {epoch + 1:03d}/{n_epochs:03d} ] loss = {train_acc:.5f}, acc = {train_acc:.5f}")
    #         print(f"[ train | {epoch + 1:03d}/{n_epochs:03d} ] loss = {train_acc:.5f}, acc = {train_acc:.5f}")
    #
    # save models
    # if train_acc > best_acc:
    #     print(f"Best model found at epoch {epoch}, saving model")
    #     best_acc=train_acc
    #     torch.save(model.state_dict(), f"./zhihu_banben/{_exp_name}_"+str(train_acc.__str__().split(",")[0].split("(")[
    #                                                              1])+".ckpt")  #
    #     # only save best to prevent
    #     # output memory
    #     # exceed
    #     # error
    #     best_acc = train_acc
    #     stale = 0
    # else:
    #     stale += 1
    #     if stale > patient:
    #         print(f"No improvment {patient} consecutive epochs, early stopping")
    #         break
# test_set=CifarDataSet("./cifar-10/test/",tfm=tfm1)
# test_loader=DataLoader(test_set, batch_size=1024, shuffle=False, num_workers=0, pin_memory=True)
# # Testing and generate prediction CSV
# model_best = Classifier().to(device)
# model_best.load_state_dict(torch.load("./zhihu_banben/sample_0.9607.ckpt"))
# model_best.eval()
# prediction = []
# q={0:"frog",  1:"truck", 2:"deer",  3:"automobile",  4:"bird",  5:"horse",  6:"ship", 7:"cat",  8:"dog",
#  9:"airplane"}
# with torch.no_grad():
#     for data, _ in test_loader:
#         test_pred = model_best(data.to(device))
#         test_label = np.argmax(test_pred.cpu().data.numpy(), axis=1)
#         #prediction += test_label.squeeze().tolist()
#         for i in (test_label.squeeze().tolist()):
#             prediction.append(q[i])
#
# # create test csv
# def pad4(i):
#     return str(i)
#
#
# df = pd.DataFrame()
# df["id"] = [pad4(i) for i in range(1, len(test_set) + 1)]
# df["label"] = prediction
# df.to_csv("./zhihu_banben/pred/"
#           "cifar10_9607.csv", index=False)
